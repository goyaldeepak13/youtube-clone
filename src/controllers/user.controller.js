import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";

const registerUser = asyncHandler(async (req, res) => {

    //   step 1 - get user detail from fronted
    const { username, email, fullname, password } = req.body // if data is coming from json or from form then we can take through body

    // step 2 validation
    if ([username, email, fullname, password].some((field) => field?.trim() === "")) {
        throw new ApiError(400, "All fields are required")
    }

    // step 3 - check if user already exist
    const existedUser = User.findOne({
        $or: [{ username }, { email }]
    })
    // console.log("existedUser", existedUser)
    if (existedUser) throw new ApiError(409, "user with email or username already exists")

    // step 4 - check for images, check for avatar
    const avatarLocalPath = req.files?.avatar[0]?.path // multer gives access of files like express gives access of body
    const coverImageLocalPath = req.files?.coverImage[0]?.path

    if (!avatarLocalPath) throw new ApiError(400, "Avatar file is required")

    // step 5 - upload them to cloudnary, avatar
    const avatar = await uploadOnCloudinary(avatarLocalPath) // basically now we are uploading our file to the cloudnary and it will take time depending upon size of file so we have to write keyword await because we want that until file is not upload on cloudnary the rest code should not be run 
    const coverImage = await uploadOnCloudinary(coverImageLocalPath)

    if (!avatar) throw new ApiError(400, "Avatar file is required")


    // step 6 - create user object - create entry in DB
    const user = await User.create({
        fullname,
        avatar: avatar.url,
        coverImage: coverImage?.url || "",
        email,
        password,
        username: username.toLowerCase()
    })


    // step 7 - remove password and refresh token field from response
    const createdUser = await User.findById(user._id).select("-password -refreshToken") // basically the _id is generated by mongodb for each entry and this is a syntax for remove password and refreshToken

    // step 8 - check for userCreation
    if (!createdUser) throw new ApiError(500, "Something went wrong while registering the user")


    // return res // res is response
    return res.status(201).json(
        new ApiResponse(200, createdUser, "User registered successfully")
    )


})

export { registerUser }